//70. 爬楼梯
//        假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
//
//        每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//
//        注意：给定 n 是一个正整数。
//
//        示例 1：
//
//        输入： 2
//        输出： 2
//        解释： 有两种方法可以爬到楼顶。
//        1.  1 阶 + 1 阶
//        2.  2 阶
//        示例 2：
//
//        输入： 3
//        输出： 3
//        解释： 有三种方法可以爬到楼顶。
//        1.  1 阶 + 1 阶 + 1 阶
//        2.  1 阶 + 2 阶
//        3.  2 阶 + 1 阶
//
//        来源：力扣（LeetCode）
//        链接：https://leetcode-cn.com/problems/climbing-stairs
//        著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。



//动态规划：由于每次只能爬一层或两层，
//所以第i楼梯只能是第i-1再爬一层,或者第i-2层再爬两层
//所以第i楼梯的爬法=第i-1楼梯的爬法 + 第i-2楼梯的爬法
//状态方程 ： dp[i] = dp[i-2] + dp[i-1]
package DP;

public class code70 {
    public int climbStairs(int n) {
        if (n == 1){
            return 1;
        }

        int[] dp = new int[n+1];

        dp[1] = 1;
        dp[2] = 2;

        for (int i = 3; i<=n; i++){
            dp[i] = dp[i-2] + dp[i-1];
        }

        return dp[n];
    }
}
